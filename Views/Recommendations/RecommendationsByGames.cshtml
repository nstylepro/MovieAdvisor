@model IEnumerable<MovieLand.Models.Movie>
@{
    ViewData["Title"] = "Recommendations By Movies";
}
<head>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />   
</head>
<h2>Your Recommended Movies By Other Movies You Ordered:</h2>


<div class="form-actions no-color">
    <p>
        Price:
        <!--search by price: populating the drop down list dynamicaly-->
        @Html.DropDownList("priceSearch", new SelectList(ViewBag.priceCategory, "Price"), "Any", new { @class = "dropdown" })

        Genre:
        <!--search by genre: populating the drop down list dynamicaly-->
        @Html.DropDownList("genreSearch", new SelectList(ViewBag.genres, "Genre"), "Any", new { @class = "dropdown" })

        Company:
        <!--search by company: populating the drop down list dynamicaly-->
        @Html.DropDownList("companySearch", new SelectList(ViewBag.companies, "Director"), "Any", new { @class = "dropdown" })

        |
        <a asp-action="Recommendations">Back to Full List</a>
    </p>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.MovieID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.MovieName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Director)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MovieID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MovieName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Director)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Genre)
                </td>
                <td>
                    <a asp-controller="Game" asp-action="Buy" asp-route-id="@item.MovieID">Buy</a> |
                    <a asp-controller="Game" asp-action="Details" asp-route-id="@item.MovieID">Details</a>                  
                </td>
            </tr>
        }
    </tbody>
</table>



@section Scripts
{
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        //var recmovies = { Movies: 'Model' };

        $("select.dropdown").change(function(){

            var priceOption = $('#priceSearch').find(":selected").text(); //this is the selcted price drop dwon value
            var genreOption = $('#genreSearch').find(":selected").text(); //this is the selected genre drop down value
            var companyOption = $('#companySearch').find(":selected").text(); //this is the selected company dwon value

            // i created a string of the recommended movies ids to pass to the controller each time he searches a movie in the recommendations 
            // i did this so the search will only be on recommended movies without calculating recommendations anew each time the user searches 
            var recgames = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@Model) as String); // create json of recommended movies passed to view
            var recgamesIds = "";
            $.each(recgames, function () {               
                recgamesIds = recgamesIds + "," + this.GameID.toString();
            });

            $.ajax({
                url: "../Movie/search", // use the result function which return a list of objects from query result in controller
                type: "post", //send it through post method
                data: {
                    priceSearch: priceOption,
                    genreSearch: genreOption,
                    companySearch: companyOption,
                    recGamesIds: recgamesIds
                },
                success: function (response) {
                    var result = '';                   
                    // if the reponse is empty display an empty table (in case no movies match the filter)
                    if (response == '') {
                        result = " "
                        $('tbody').html(result);
                    }
                    // table body
                    $.each(response, function (key, value) {
                        result +=
                            '<tr>' +
                            '<td>' + value.gameID + '</td>' +
                            '<td>' + value.gameName + '</td>' +
                            '<td>' + value.price + '</td>' +
                            '<td>' + value.publisherCompany + '</td>' +
                            '<td>' + value.genre + '</td>' +
                            '<td>' +
                            '<a href="/Movie/Buy/' + value.gameID + '">Buy</a> | ' +
                            '<a href="/Movie/Details/' + value.gameID + '">Details</a>' +                                           
                            '</td>' +
                            '</tr>'

                        $('tbody').html(result);
                    });
                },
                error: function (xhr) {
                    alert("get reuquest error")
                }
            });
        });

    </script>
}
